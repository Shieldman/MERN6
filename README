Certainly! Here's a combined documentation for both sets of code:

---

# Sports and Athletes API Documentation

Welcome to the Sports and Athletes API documentation. This API allows you to manage sports, athletes, and their associations.

## Table of Contents

1. [Introduction](#introduction)
2. [Authentication](#authentication)
3. [Sports Endpoints](#sports-endpoints)
   - [Get All Sports](#get-all-sports)
   - [Create a Sport](#create-a-sport)
   - [Get Sport by ID](#get-sport-by-id)
   - [Update Sport by ID](#update-sport-by-id)
   - [Delete Sport by ID](#delete-sport-by-id)
4. [Athletes Endpoints](#athletes-endpoints)
   - [Get All Athletes](#get-all-athletes)
   - [Create an Athlete](#create-an-athlete)
   - [Get Athlete by ID](#get-athlete-by-id)
   - [Update Athlete by ID](#update-athlete-by-id)
   - [Delete Athlete by ID](#delete-athlete-by-id)
5. [Error Handling](#error-handling)
6. [Rate Limits](#rate-limits)
7. [Examples](#examples)
8. [Contact Information](#contact-information)

## 1. Introduction

This API allows you to manage sports, athletes, and their associations. You can perform actions such as fetching a list of sports, creating new sports and athletes, updating sport and athlete details, and deleting sports and athletes.

## 2. Authentication

Currently, this API does not require authentication. However, you should consider implementing authentication and authorization mechanisms to secure your API in a production environment.

## 3. Sports Endpoints

### Get All Sports

- **Endpoint:** `GET /sports`
- **Description:** Retrieve a list of sports. You can optionally filter the results by providing a `filter` query parameter.
- **Request Parameters:**
  - `filter` (optional): Filter sports by name (case-insensitive).
- **Response:**
  - Status Code: `200 OK`
  - Body: A JSON array containing a list of sports. Each sport object includes basic information and a list of associated athletes.

### Create a Sport

- **Endpoint:** `POST /sports`
- **Description:** Create a new sport.
- **Request Body:**
  - `name`: The name of the sport.
  - `players`: The number of players in the sport.
  - `country`: The country where the sport is popular.
  - `athletes` (optional): An array of athlete IDs associated with the sport.
- **Response:**
  - Status Code: `201 Created`
  - Body: The newly created sport object.

### Get Sport by ID

- **Endpoint:** `GET /sports/{id}`
- **Description:** Retrieve a specific sport by its ID.
- **Request Parameters:**
  - `id`: The ID of the sport to retrieve.
- **Response:**
  - Status Code: `200 OK`
  - Body: The sport object with details, including associated athletes.

### Update Sport by ID

- **Endpoint:** `PUT /sports/{id}`
- **Description:** Update the details of a specific sport by its ID.
- **Request Parameters:**
  - `id`: The ID of the sport to update.
- **Request Body:**
  - `name` (optional): The updated name of the sport.
  - `players` (optional): The updated number of players.
  - `country` (optional): The updated country.
  - `athletes` (optional): An array of updated athlete IDs associated with the sport.
- **Response:**
  - Status Code: `200 OK`
  - Body: The updated sport object.

### Delete Sport by ID

- **Endpoint:** `DELETE /sports/{id}`
- **Description:** Delete a specific sport by its ID. Sports with associated athletes cannot be deleted.
- **Request Parameters:**
  - `id`: The ID of the sport to delete.
- **Response:**
  - Status Code: `200 OK` if successful.
  - Status Code: `409 Conflict` if the sport has associated athletes.

## 4. Athletes Endpoints

### Get All Athletes

- **Endpoint:** `GET /athletes`
- **Description:** Retrieve a list of athletes. You can optionally filter the results by providing a `filter` query parameter.
- **Request Parameters:**
  - `filter` (optional): Filter athletes by name (case-insensitive).
- **Response:**
  - Status Code: `200 OK`
  - Body: A JSON array containing a list of athletes. Each athlete object includes basic information and a reference to their associated sport(s).

### Create an Athlete

- **Endpoint:** `POST /athletes`
- **Description:** Create a new athlete.
- **Request Body:**
  - `name`: The name of the athlete.
  - `age`: The age of the athlete.
  - `year`: The year the athlete started their career.
  - `sport`: The ID of the sport associated with the athlete.
- **Response:**
  - Status Code: `201 Created`
  - Body: The newly created athlete object.

### Get Athlete by ID

- **Endpoint:** `GET /athletes/{id}`
- **Description:** Retrieve a specific athlete by their ID.
- **Request Parameters:**
  - `id`: The ID of the athlete to retrieve.
- **Response:**
  - Status Code: `200 OK`
  - Body: The athlete object with details, including associated sport(s).

### Update Athlete by ID

- **Endpoint:** `PUT /athletes/{id}`
- **Description:** Update the details of a specific athlete by their ID.
- **Request Parameters:**
  - `id`: The ID of the athlete to update.
- **Request Body:**
  - `name` (optional): The updated name of the athlete.
  - `age` (optional): The updated age of the athlete.
  - `year` (optional): The updated career start year of the athlete.
  - `sport` (optional): The updated ID of the sport associated with the athlete.
- **Response:**
  - Status Code: `200 OK`
  - Body: The updated athlete object.

### Delete Athlete by ID

- **Endpoint:** `DELETE /athletes/{id}`
- **Description:** Delete a specific athlete by their ID.
- **Request Parameters:**
  - `id`: The ID of the athlete to delete.
- **Response:**
  - Status Code: `200 OK` if successful.

## 5. Error Handling

- If a request results in an error, the API will respond with an appropriate HTTP status code and a JSON response containing an error message.
- Common error status codes include:
  - `400 Bad Request`: Invalid request parameters or body.
  - `404 Not Found`: The requested resource does not exist.
  - `409 Conflict`: A conflict occurred, such as trying to delete an athlete associated with a sport.
  - `500 Internal Server Error`: An unexpected server error occurred.

## 6. Rate Limits

Currently, there are no rate limits set for this API. However, it's advisable to implement